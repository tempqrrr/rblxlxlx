--[[
    âœ… Boss Autofarm Script with 4 Secondary Tasks + Respawn Handling + One-Time Baseplate Setup
    - Auto TP
    - Auto M1
    - Auto Kill
    - Auto Face
    - Auto Equip Weapon
    - Respawn-safe & performance optimized
--]]
local autofarmTask, bossWaitTask = nil, nil
local taskHandles = {}
local isBossActive = false
local cachedBossHRP = nil

local player = game.Players.LocalPlayer
local entities = workspace:WaitForChild("Entities")
local forceFieldPath = nil
local humanoidRootPart = nil
local lastBossTPTime = 0
local lastVoidTPTime = 0
local lastBoss29Time = 0
local bossdistance = 0
local checkspeed = 0.01

-- Utility: Get ForceField path
local function getForceFieldPath()
    local name = player.Name
    return entities:FindFirstChild(name) and entities[name]:FindFirstChild("ForceField")
end

-- Utility: Get Boss HRP with caching
local function getBossHRP()
    if cachedBossHRP and cachedBossHRP.Parent then
        return cachedBossHRP
    end
    for _, entity in pairs(entities:GetChildren()) do
        if not game.Players:FindFirstChild(entity.Name) then
            local hrp = entity:FindFirstChild("HumanoidRootPart")
            if hrp then
                cachedBossHRP = hrp
                return hrp
            end
        end
    end
    return nil
end

-- Utility: Get Boss Humanoid
local function getBossHumanoid()
    for _, entity in ipairs(entities:GetChildren()) do
        if not game.Players:GetPlayerFromCharacter(entity) then
            local hum = entity:FindFirstChildOfClass("Humanoid")
            if hum then
                return hum
            end
        end
    end
    return nil
end

-- Bypass Dash
local function tpbypass()
    local dashargs = {
        [1] = {
            [1] = { ["Module"] = "Dash" },
            [2] = "\5"
        }
    }
    game.ReplicatedStorage:WaitForChild("Bridgenet2Main"):WaitForChild("dataRemoteEvent"):FireServer(unpack(dashargs))
end

-- Teleport
local function tp(pos)
    if not humanoidRootPart then return end
    local offset = Vector3.new(bossHorizontalOffset, bossVerticalOffset, 0)
    humanoidRootPart.CFrame = CFrame.new(pos + offset)
end

-- Cooldown-based TP logic
local function bosstp31()
    local boss = getBossHRP()
    if not boss then return end
    tpbypass()
    task.wait(0.005)
    tp(boss.Position)
end

local function bosstp29()
    local boss = getBossHRP()
    if not boss then return end
    local yDiff = math.abs(humanoidRootPart.Position.Y - boss.Position.Y)
    local y = (yDiff <= 4 and humanoidRootPart.Position.Y or boss.Position.Y) + bossVerticalOffset
    local offsetPos = Vector3.new(boss.Position.X + bossHorizontalOffset, y, boss.Position.Z)
    humanoidRootPart.CFrame = CFrame.new(offsetPos)
end

-- Distance Calculation
local function updateBossDistance()
    local boss = getBossHRP()
    if boss then
        bossdistance = (humanoidRootPart.Position - boss.Position).Magnitude
    end
end

-- ForceField Handler
local function ffhandler()
    forceFieldPath = getForceFieldPath()
    if forceFieldPath then
        updateBossDistance()
        if tick() - lastBossTPTime > 2 and bossdistance > 30 then
            bosstp31()
            lastBossTPTime = tick()
        elseif tick() - lastBoss29Time > 0.5 and bossdistance <= 30 then
            bosstp29()
            lastBoss29Time = tick()
        end
    else
        if tick() - lastVoidTPTime > 2 then
            tpbypass()
            task.wait(0.005)
            tp(Vector3.new(humanoidRootPart.Position.X, -999, humanoidRootPart.Position.Z))
            lastVoidTPTime = tick()
        end
    end
end

-- START TASKS
function startAutofarmLoop()
    taskHandles.autofarm = task.spawn(function()
        while autoboss and isBossActive do
            task.wait(checkspeed)
            ffhandler()
        end
    end)
end

local function startAutoM1Task()
    if autoM1Running then return end
    autoM1Running = true

    local m1args = {
        [1] = {
            [1] = { ["Module"] = "M1" },
            [2] = "\5"
        }
    }
    local remoteEvent = game:GetService("ReplicatedStorage"):WaitForChild("Bridgenet2Main"):WaitForChild("dataRemoteEvent")

    taskHandles.autoM1 = task.spawn(function()
        while autoM1Running and autoboss and isBossActive do
            remoteEvent:FireServer(unpack(m1args))
            task.wait(0.15)
        end
    end)
end

function startAutoKill()
    taskHandles.autoKill = task.spawn(function()
        while autoboss and isBossActive do
            local hum = getBossHumanoid()
            if hum and hum.Health < 2000 and hum.Health > 0 then
                hum.Health = -1
            end
            task.wait(0.1)
        end
    end)
end

function startWeaponAutoEquip()
    taskHandles.weapon = task.spawn(function()
        while autoboss and isBossActive do
            local boss = getBossHRP()
            if boss then
                local entity = entities:FindFirstChild(player.Name)
                local toggle = entity and entity:FindFirstChild("Toggle")
                local race = entity and entity:FindFirstChild("Race")
                if toggle and not toggle.Value and race and race.Value then
                    local holding = (race.Value == "Ghoul")
                    local equipargs = {
                        [1] = {
                            [1] = {
                                ["Module"] = "Toggle",
                                ["IsHolding"] = holding
                            },
                            [2] = "\5"
                        }
                    }
                    game.ReplicatedStorage.Bridgenet2Main.dataRemoteEvent:FireServer(unpack(equipargs))
                end
            end
            task.wait(1)
        end
    end)
end

function startFacer()
    taskHandles.facer = task.spawn(function()
        print("Facer module initialized")
        local cam = workspace.CurrentCamera
        local hrp = humanoidRootPart

        game:GetService("RunService").RenderStepped:Connect(function()
            if not autoboss or not isBossActive then return end
            local boss = getBossHRP()
            if boss and cam and hrp then
                local camPos = cam.CFrame.Position
                cam.CFrame = CFrame.lookAt(camPos, Vector3.new(boss.Position.X, camPos.Y, boss.Position.Z))

                local playerPos = hrp.Position
                hrp.CFrame = CFrame.lookAt(playerPos, Vector3.new(boss.Position.X, playerPos.Y, boss.Position.Z))
            end
        end)
    end)
end

-- STOP TASKS
local function stopAllTasks()
    for name, thread in pairs(taskHandles) do
        if thread then task.cancel(thread) end
        taskHandles[name] = nil
    end
end

-- Baseplate setup (one-time)
local function setupBaseplate()
    local pos = humanoidRootPart.Position
    local baseplate = Instance.new("Part")
    baseplate.Size = Vector3.new(2000, 5, 2000)
    baseplate.Position = Vector3.new(pos.X, pos.Y - 5, pos.Z)
    baseplate.Anchored = true
    baseplate.Material = Enum.Material.SmoothPlastic
    baseplate.BrickColor = BrickColor.new("Institutional white")
    baseplate.Name = "Baseplate"
    baseplate.Parent = workspace.Map.BossRoom
    task.delay(3, function()
        local roomModel = workspace.Map.BossRoom:FindFirstChild("RoomModel")
        if roomModel then roomModel:Destroy() end
    end)
end

-- Set Autoboss
function setAutoboss(state)
    if autoboss == state then return end
    autoboss = state
    print("Autoboss toggled:", autoboss)

    if autoboss then
        if bossWaitTask then task.cancel(bossWaitTask) end
        bossWaitTask = task.spawn(function()
            while autoboss do
                local boss = getBossHRP()
                if boss then
                    print("Boss found. Starting all tasks.")
                    isBossActive = true
                    setupBaseplate()
                    startAutofarmLoop()
                    startAutoKill()
                    startAutoM1Task()
                    startWeaponAutoEquip()
                    startFacer()
                    break
                end
                task.wait(0.1)
            end
        end)
    else
        isBossActive = false
        stopAllTasks()
        if bossWaitTask then bossWaitTask = nil end
    end
end

-- Respawn Handler
player.CharacterAdded:Connect(function(character)
    task.wait(0.2)
    forceFieldPath = getForceFieldPath()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    cachedBossHRP = nil
    lastBossTPTime = 0
    lastBoss29Time = 0
    lastVoidTPTime = 0
    bossdistance = 0
    print("[Respawn] Paths and state reset.")
end)

-- Init
if player.Character then
    humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
    forceFieldPath = getForceFieldPath()
end

-- GUI Setup
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Fatman fanclub",
    LoadingTitle = "Exps for a shitty ass game",
    LoadingSubtitle = "by wad",
    Theme = "Amethyst",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ghoulreautotototo",
        FileName = "monkey"
    }
})

local BossTab = Window:CreateTab("Boss Autofarm", nil)
BossTab:CreateSection("Boss Toggle")

BossTab:CreateToggle({
    Name = "Boss Autofarm",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(val)
        setAutoboss(val)
    end
})

BossTab:CreateSlider({
   Name = "Forcefield check speed",
   Range = {0.05, 0.3},
   Increment = 0.01,
   Suffix = "seconds",
   CurrentValue = checkspeed,
   Flag = "Slider1",
   Callback = function(Value)
       checkspeed = Value
   end,
})
