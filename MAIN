-- Print message BEFORE spawning a separate thread
print("Main module initialized")

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer

local bossHRP = nil
local cooldownForceField = false
local cooldownNoForceField = false
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local tweenSpeed = 0.7
local frontDistance = 9
local verticalOffset = 0
local retreatDistance = 30
local downwardDistance = 150

local function getBossHRP()
    local entities = workspace:FindFirstChild("Entities")
    if not entities then
        print("[DEBUG] Entities folder not found.")
        return nil
    end

    for _, entity in ipairs(entities:GetChildren()) do
        local player = Players:GetPlayerFromCharacter(entity)
        if not player then
            local hrp = entity:FindFirstChild("HumanoidRootPart")
            if hrp then
                print("[DEBUG] Found boss: " .. entity.Name)
                return hrp
            end
        end
    end
    print("[DEBUG] No boss found.")
    return nil
end

local function tweenToPosition(position)
    local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if root then
        local tween = TweenService:Create(root, TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(position)})
        tween:Play()
    end
end

local function handleForceFieldCheck()
    while task.wait(0.1) do
        local playerEntity = workspace.Entities:FindFirstChild(player.Name) -- Find the player's entity
        if playerEntity then
            local forceField = playerEntity:FindFirstChild("ForceField")

            if forceField and not cooldownForceField then
                -- ForceField exists, go near the boss
                if bossHRP then
                    local targetPos = bossHRP.Position + (bossHRP.CFrame.LookVector * frontDistance) + Vector3.new(0, verticalOffset, 0)
                    tweenToPosition(targetPos)
                end
                cooldownForceField = true
                task.delay(2, function() cooldownForceField = false end)

            elseif not forceField and not cooldownNoForceField then
    -- No ForceField, always retreat backwards
    local retreatPos = hrp.Position - (hrp.CFrame.LookVector * retreatDistance)
    tweenToPosition(retreatPos)
    task.wait(1.1)
    local downwardPos = Vector3.new(hrp.Position.X, hrp.Position.Y - downwardDistance, hrp.Position.Z)
    tweenToPosition(downwardPos)
    
    cooldownNoForceField = true
    task.delay(3, function() cooldownNoForceField = false end)
            end
        end
    end
end

local function executeOnce()
    bossHRP = getBossHRP()
    if bossHRP then
        local targetPosition = bossHRP.Position + (bossHRP.CFrame.LookVector * frontDistance)
        tweenToPosition(targetPosition)
    else
        warn("[ERROR] Boss not found.")
    end
end

local function onCharacterAdded(character)
    task.wait(3) -- Allow time for boss detection
    bossHRP = getBossHRP()

    task.spawn(handleForceFieldCheck)
end

-- Ensure the one-time boss positioning executes once
if not _G.hasExecutedOnce then
    _G.hasExecutedOnce = true
    executeOnce()
end

-- Listen for character respawn
player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end
