-- Print message BEFORE spawning a separate thread
print("Main module initialized")

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer

local bossHRP = nil
local cooldownToBoss = false
local cooldownToUnderground = false
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local tweenSpeed = 0.4
local frontDistance = 9
local verticalOffset = 0
local downwardDistance = 50

local isBossActive = true -- This will track if the boss is still alive

local function getBossHRP()
    local entities = workspace:FindFirstChild("Entities")
    if not entities then
        print("[DEBUG] Entities folder not found.")
        return nil
    end

    for _, entity in ipairs(entities:GetChildren()) do
        local player = Players:GetPlayerFromCharacter(entity)
        if not player then
            local hrp = entity:FindFirstChild("HumanoidRootPart")
            if hrp then
                print("[DEBUG] Found boss: " .. entity.Name)
                return hrp
            end
        end
    end
    print("[DEBUG] No boss found.")
    return nil
end

local function tweenToPosition(position)
    local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if root then
        local tween = TweenService:Create(root, TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(position)})
        tween:Play()
    end
end

local function handleForceFieldCheck()
    while task.wait(0.015) do
        if not isBossActive then
            return -- Stop the loop if the boss is not active
        end
        
        local playerEntity = workspace.Entities:FindFirstChild(player.Name) -- Find the player's entity
        if playerEntity then
            local forceField = playerEntity:FindFirstChild("ForceField")

            if forceField and not cooldownToBoss then
                -- Move to the boss if ForceField exists
                if bossHRP then
                    local targetPos = bossHRP.Position + (bossHRP.CFrame.LookVector * frontDistance) + Vector3.new(0, verticalOffset, 0)
                    tweenToPosition(targetPos)
                end
                cooldownToBoss = true
                task.delay(3, function() cooldownToBoss = false end)

            elseif not forceField and not cooldownToUnderground then
                -- Move 100 studs downward
                local downwardPos = Vector3.new(hrp.Position.X, hrp.Position.Y - downwardDistance, hrp.Position.Z)
                tweenToPosition(downwardPos)

                cooldownToUnderground = true
                task.delay(4, function() cooldownToUnderground = false end)
            end
        end
    end
end

local function executeOnce()
    bossHRP = getBossHRP()
    if bossHRP then
        local targetPosition = bossHRP.Position + (bossHRP.CFrame.LookVector * frontDistance)
        tweenToPosition(targetPosition)
    else
        warn("[ERROR] Boss not found.")
    end
end

local function onCharacterAdded(character)
    task.wait(3) -- Allow time for boss detection
    bossHRP = getBossHRP()

    task.spawn(handleForceFieldCheck)
end

-- Function to check if the boss still exists
local function checkBossEverySecond()
    while task.wait(1) do
        if not getBossHRP() then
            print("[DEBUG] Boss no longer exists. Cancelling script...")
            isBossActive = false -- Set the flag to stop all operations
            return -- Stop the loop and all other processes
        end
    end
end

-- Ensure the one-time boss positioning executes once
if not _G.hasExecutedOnce then
    _G.hasExecutedOnce = true
    executeOnce()
end

-- Listen for character respawn
player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end

-- Start checking for boss existence in a separate thread
task.spawn(checkBossEverySecond)
