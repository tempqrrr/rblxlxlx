-- Print message BEFORE spawning a separate thread
print("Main module initialized")

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer

local bossHRP = nil
local humanoid = nil
local maxHealth = nil
local cooldownHealthLoss = false
local cooldownFullHealth = false
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local tweenSpeed = 1
local frontDistance = 9
local verticalOffset = 0
local retreatDistance = 30
local downwardDistance = 185

local function getBossHRP()
    local entities = workspace:FindFirstChild("Entities")
    if not entities then
        print("[DEBUG] Entities folder not found.")
        return nil
    end

    for _, entity in ipairs(entities:GetChildren()) do
        local player = Players:GetPlayerFromCharacter(entity)
        if not player then
            local hrp = entity:FindFirstChild("HumanoidRootPart")
            if hrp then
                print("[DEBUG] Found boss: " .. entity.Name)
                print("[DEBUG] Boss's HumanoidRootPart: " .. tostring(hrp))
                return hrp
            else
                print("[DEBUG] No HumanoidRootPart for entity: " .. entity.Name)
            end
        else
            print("[DEBUG] Skipping player character: " .. entity.Name)
        end
    end
    print("[DEBUG] No boss found.")
    return nil
end

local function tweenToPosition(position)
    local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if root then
        local tween = TweenService:Create(root, TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(position)})
        tween:Play()
    end
end

local function anchorBossOnHealthLoss()
    while task.wait(0.1) do
        if humanoid and bossHRP and humanoid.Health < maxHealth then
            bossHRP.Anchored = true
        end
    end
end

local function unanchorBossOnFullHealth()
    while task.wait(0.1) do
        if humanoid and bossHRP and humanoid.Health == maxHealth then
            bossHRP.Anchored = false
        end
    end
end

local function handleHealthCheck()
    while task.wait(0.1) do
        if humanoid and bossHRP and maxHealth then
            if humanoid.Health == maxHealth and not cooldownFullHealth then
                -- Get the player's current Y position
                local playerYPos = hrp.Position.Y
                
                -- Calculate the target position 9 studs in front of the boss, keeping the player's current Y position
                local targetPos = bossHRP.Position + (bossHRP.CFrame.LookVector * frontDistance)
                targetPos = Vector3.new(targetPos.X, playerYPos, targetPos.Z) -- Keep the player's Y position, and adjust X and Z
                
                tweenToPosition(targetPos)
                cooldownFullHealth = true
                task.delay(2, function() cooldownFullHealth = false end)
            elseif humanoid.Health < maxHealth and not cooldownHealthLoss then
                local direction = math.random(1, 2) == 1 and 1 or -1
                local retreatPos = hrp.Position + (hrp.CFrame.LookVector * retreatDistance * direction)
                tweenToPosition(retreatPos)
                task.wait(1.1)
                local downwardPos = Vector3.new(hrp.Position.X, hrp.Position.Y - downwardDistance, hrp.Position.Z)
                tweenToPosition(downwardPos)
                cooldownHealthLoss = true
                task.delay(4, function() cooldownHealthLoss = false end)
            end
        end
    end
end

local function executeOnce()
    local bossHRP = getBossHRP()
    if bossHRP then
        local targetPosition = bossHRP.Position + (bossHRP.CFrame.LookVector * frontDistance)
        tweenToPosition(targetPosition)
    else
        warn("[ERROR] Boss not found.")
    end
end

local function onCharacterAdded(character)
    humanoid = character:WaitForChild("Humanoid")
    task.wait(3) -- Allow time for boss detection
    maxHealth = humanoid.Health
    bossHRP = getBossHRP()

    task.spawn(anchorBossOnHealthLoss)
    task.spawn(unanchorBossOnFullHealth)
    task.spawn(handleHealthCheck)
end

-- Ensure the one-time boss positioning executes once
if not _G.hasExecutedOnce then
    _G.hasExecutedOnce = true
    executeOnce()
end

-- Listen for character respawn
player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end
