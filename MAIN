local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ProximityPromptService = game:GetService("ProximityPromptService")

local characterFolder = workspace:WaitForChild("Characters")
local player = Players.LocalPlayer
local mouse = player:GetMouse()
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local hrp = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

local cleanupLoopRunning = false
local cleanupLoopThread = nil

local walkSpeedConnection = nil
local loserspeed = 16

local cowvalue = 1

local PromptButtonHoldBeganConnection = nil
local PromptShownConnection = nil
local originalDurations = {}

local noJumpCooldownEnabled = false
local jumpListener = nil
local stateConn = nil
local charConn = nil
local humanoid = nil
local canJump = false

local itemList = {
	"Basket",
	"Bone Chestpiece",
	"Bucket",
	"Cap",
	"Hood",
	"Mallet",
	"Purple Dye",
	"Rope",
	"Spear",
	"Stone Axe",
	"Stone Hammer",
	"Stone Knife",
	"Stone Pickaxe",
	"Tunic",
	"Vest",
	"War Horn",
	"Wolf Headress",
	"Wood Club",
	"Wood Knife"
}

local jobList = {
	"Harvester",
	"Hunter",
	"Warrior",
	"Engineer",
	"Farmer",
	"Tailor"
}

local Noclipping = nil
local Clip = nil

local hitboxConnection = nil
local originalSizes = {} -- [playerName] = Vector3
local active = false
local hbsize = 15
local hbtrans = 0.7

local jp = 50
local toggleActive = false

local danceActive = false

local autoThirstEnabled = false
local autoThirstConnection

local function bindNoJumpCooldown(char)
	if stateConn then stateConn:Disconnect() end

	humanoid = char:WaitForChild("Humanoid")

	stateConn = humanoid.StateChanged:Connect(function(_, newState)
		if newState == Enum.HumanoidStateType.Landed then
			canJump = true
		elseif newState == Enum.HumanoidStateType.Freefall then
			canJump = false
		end
	end)

	-- Allow jump if we spawn on the ground
	canJump = humanoid:GetState() == Enum.HumanoidStateType.Running
end

local function startNoJumpCooldown()
	if noJumpCooldownEnabled then return end
	noJumpCooldownEnabled = true

	local UserInputService = game:GetService("UserInputService")

	if player.Character then
		bindNoJumpCooldown(player.Character)
	end

	charConn = player.CharacterAdded:Connect(bindNoJumpCooldown)

	jumpListener = UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if gameProcessed then return end
		if input.KeyCode == Enum.KeyCode.Space and canJump and humanoid then
			humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			canJump = false
		end
	end)

	notify("No Jump Cooldown", "Enabled")
end

local function stopNoJumpCooldown()
	noJumpCooldownEnabled = false
	canJump = false

	if jumpListener then jumpListener:Disconnect() jumpListener = nil end
	if stateConn then stateConn:Disconnect() stateConn = nil end
	if charConn then charConn:Disconnect() charConn = nil end

	humanoid = nil
	notify("No Jump Cooldown", "Disabled")
end

local function startAutoThirst()
    if autoThirstEnabled then return end
    autoThirstEnabled = true

    autoThirstConnection = task.spawn(function()
        while autoThirstEnabled do
            local waterSource = game:GetService("ReplicatedStorage"):FindFirstChild("WaterSource")
            if waterSource then
                waterSource:FireServer("Drank")
            end
            task.wait(5)
        end
    end)

    notify("Auto Thirst", "Enabled - Drinking every 5 seconds")
end

local function stopAutoThirst()
    autoThirstEnabled = false
    notify("Auto Thirst", "Disabled")
end

function forceWalkSpeed()
    print("walkspeed")

    if walkSpeedConnection then
        walkSpeedConnection:Disconnect()
    end

    walkSpeedConnection = RunService.RenderStepped:Connect(function()
        local charFolder = workspace:FindFirstChild("Characters")
        if charFolder then
            local char = charFolder:FindFirstChild(player.Name)
            if char and char:FindFirstChild("WalkSpeed") then
                char.WalkSpeed.Value = loserspeed
            end
        end
    end)
end

function stopForceWalkSpeed()
    if walkSpeedConnection then
        walkSpeedConnection:Disconnect()
        walkSpeedConnection = nil
    end
end

function startCleanupLoop()
    if cleanupLoopRunning then return end
    cleanupLoopRunning = true

    cleanupLoopThread = task.spawn(function()
        while cleanupLoopRunning do
            local map = workspace:FindFirstChild("Map")
            local regionMarkers = workspace:FindFirstChild("RegionMarkers")

            if map then
                if map:FindFirstChild("Air") then
                    for _, obj in ipairs(map.Air:GetDescendants()) do
                        obj:Destroy()
                    end
                end

                if map:FindFirstChild("Barrier") then
                    for _, obj in ipairs(map.Barrier:GetDescendants()) do
                        obj:Destroy()
                    end
                end
            end

            if regionMarkers then
                for _, obj in ipairs(regionMarkers:GetDescendants()) do
                    obj:Destroy()
                end
            end

            task.wait(5)
        end
    end)
end

function stopCleanupLoop()
    cleanupLoopRunning = false
end

function createCowControllerTool()
	local tool = Instance.new("Tool")
	tool.Name = "CowController"
	tool.RequiresHandle = false
	tool.CanBeDropped = false
	tool.Parent = player:WaitForChild("Backpack")

	local equipped = false
	local cows = {}
	local activeFormationCows = {}

	local editingJumpPower = false
	local cowWalkSpeed = 24
	local cowJumpPower = 58.24824142456055
	local savedWalkSpeed = cowWalkSpeed
	local walkCycle = false
	local jumpCycle = false
	local walkToggledZero = false
	local formationMode = false

	local function notify(title, text)
		pcall(function()
			if Rayfield and Rayfield.Notify then
				Rayfield:Notify({
					Title = title,
					Content = text,
					Duration = 6.5,
					Image = 4483362458
				})
			end
		end)
	end

	local function clearLabels()
		for _, cow in pairs(activeFormationCows) do
			local head = cow:FindFirstChild("Head")
			if head then
				local label = head:FindFirstChild("CowLabel")
				if label then
					label:Destroy()
				end
			end
		end
	end

	local function labelCow(cow, number)
		local head = cow:FindFirstChild("Head")
		if not head or head:FindFirstChild("CowLabel") then return end

		local billboard = Instance.new("BillboardGui")
		billboard.Name = "CowLabel"
		billboard.Adornee = head
		billboard.Size = UDim2.new(0, 100, 0, 40)
		billboard.StudsOffset = Vector3.new(0, 2.5, 0)
		billboard.AlwaysOnTop = true
		billboard.LightInfluence = 0
		billboard.MaxDistance = 150
		billboard.Parent = head

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 1, 0)
		label.BackgroundTransparency = 1
		label.Text = tostring(number)
		label.TextColor3 = Color3.new(1, 1, 1)
		label.TextStrokeTransparency = 0.5
		label.TextScaled = false
		label.Font = Enum.Font.GothamBold
		label.Parent = billboard
	end

	local function getCows()
		cows = {}

		local function collectCows(container)
			for _, obj in ipairs(container:GetChildren()) do
				if obj.Name == "Cow" and obj:FindFirstChild("Humanoid") then
					table.insert(cows, obj)
				end
			end
		end

		collectCows(workspace)

		local map = workspace:FindFirstChild("Map")
		if map and map:FindFirstChild("Resources") then
			local animals = map.Resources:FindFirstChild("Animals")
			if animals then
				collectCows(animals)
			end
		end

		for _, cow in pairs(cows) do
			local hum = cow:FindFirstChild("Humanoid")
			if hum then
				hum.WalkSpeed = cowWalkSpeed
				hum.JumpPower = cowJumpPower
			end
		end
	end

	local function applyStats()
		for _, cow in pairs(cows) do
			local hum = cow:FindFirstChild("Humanoid")
			if hum then
				hum.WalkSpeed = cowWalkSpeed
				hum.JumpPower = cowJumpPower
			end
		end
	end

	tool.Equipped:Connect(function()
		equipped = true
		getCows()
	end)

	tool.Unequipped:Connect(function()
		equipped = false
		clearLabels()
	end)

	RunService.RenderStepped:Connect(function()
		if not equipped then return end

		if formationMode then
			activeFormationCows = {}
			for _, cow in pairs(cows) do
				local referencePart = cow:FindFirstChild("HumanoidRootPart") or cow:FindFirstChild("Torso") or cow:FindFirstChildWhichIsA("BasePart")
				if referencePart and humanoidRootPart then
					if (referencePart.Position - humanoidRootPart.Position).Magnitude <= 100 then
						table.insert(activeFormationCows, cow)
					end
				end
			end

			for i, cow in ipairs(activeFormationCows) do
				local row = math.floor((i - 1) / 5)
				local col = (i - 1) % 5

				local offsetX = (col - 2) * 5
				local offsetZ = 5 + row * 7.5

				local formationPos = humanoidRootPart.Position - humanoidRootPart.CFrame.LookVector * offsetZ
				formationPos = formationPos + humanoidRootPart.CFrame.RightVector * offsetX

				local hum = cow:FindFirstChild("Humanoid")
				if hum then
					hum:MoveTo(formationPos)
				end

				labelCow(cow, i)
			end
		else
			if mouse.Hit then
				local target = mouse.Hit.Position
				for _, cow in pairs(cows) do
					local hum = cow:FindFirstChild("Humanoid")
					if hum then
						hum.WalkToPoint = target
					end
				end
			end
		end
	end)

	UserInputService.InputBegan:Connect(function(input, gameProcessed)
		if not equipped or gameProcessed then return end

		local key = input.KeyCode

		if key == Enum.KeyCode.H then
			for _, cow in pairs(cows) do
				local hum = cow:FindFirstChild("Humanoid")
				if hum then
					hum.Jump = true
				end
			end

		elseif key == Enum.KeyCode.R then
			editingJumpPower = not editingJumpPower
			notify("Editing Mode", editingJumpPower and "JumpPower" or "WalkSpeed")

		elseif key == Enum.KeyCode.Q then
			if not editingJumpPower then
				walkToggledZero = not walkToggledZero
				if walkToggledZero then
					savedWalkSpeed = cowWalkSpeed
					cowWalkSpeed = 0
				else
					cowWalkSpeed = savedWalkSpeed
				end
				applyStats()
				notify("WalkSpeed", "Toggled to " .. cowWalkSpeed)
			end

		elseif key == Enum.KeyCode.M then
			if editingJumpPower then
				jumpCycle = not jumpCycle
				cowJumpPower = jumpCycle and 130 or 58.24824142456055
				notify("JumpPower", "Cycled to " .. cowJumpPower)
			else
				walkCycle = not walkCycle
				cowWalkSpeed = walkCycle and 100 or 24
				savedWalkSpeed = cowWalkSpeed
				notify("WalkSpeed", "Cycled to " .. cowWalkSpeed)
			end
			applyStats()

		elseif key == Enum.KeyCode.Equals or key == Enum.KeyCode.KeypadPlus then
			if editingJumpPower then
				cowJumpPower += cowvalue
				notify("JumpPower", tostring(cowJumpPower))
			else
				cowWalkSpeed += cowvalue
				savedWalkSpeed = cowWalkSpeed
				notify("WalkSpeed", tostring(cowWalkSpeed))
			end
			applyStats()

		elseif key == Enum.KeyCode.Minus or key == Enum.KeyCode.KeypadMinus then
			if editingJumpPower then
				cowJumpPower -= cowvalue
				notify("JumpPower", tostring(cowJumpPower))
			else
				cowWalkSpeed -= cowvalue
				savedWalkSpeed = cowWalkSpeed
				notify("WalkSpeed", tostring(cowWalkSpeed))
			end
			applyStats()

		elseif key == Enum.KeyCode.L then
			notify("Cow fixed maybe")
			if formationMode then
				clearLabels()
				getCows()
				applyStats()
			else
				getCows()
				applyStats()
			end

		elseif key == Enum.KeyCode.Z then
			formationMode = not formationMode
			clearLabels()
			notify("Mode Switched", formationMode and "Formation Mode" or "Mouse Mode")
		end
	end)
end

function giveWeaponStealerTool()
	local tool = Instance.new("Tool")
	tool.Name = "Weapon Stealer"
	tool.RequiresHandle = false
	tool.Parent = player:WaitForChild("Backpack")

	local highlight
	local targetPlayer = nil
	local running = false

	local function clearHighlight()
		if highlight then
			highlight:Destroy()
			highlight = nil
		end
		targetPlayer = nil
	end

	local function createHighlight(model)
		clearHighlight()
		highlight = Instance.new("Highlight")
		highlight.Adornee = model
		highlight.FillColor = Color3.new(1, 0, 0)
		highlight.OutlineColor = Color3.new(1, 1, 1)
		highlight.Parent = workspace
	end

	local function findTargetPlayer()
		local closestPlayer = nil
		local shortestDist = math.huge

		for _, otherPlayer in ipairs(Players:GetPlayers()) do
			if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
				local hrp = otherPlayer.Character.HumanoidRootPart
				local screenPos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(hrp.Position)
				if onScreen then
					local dist = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
					if dist < 50 and dist < shortestDist then
						closestPlayer = otherPlayer
						shortestDist = dist
					end
				end
			end
		end

		return closestPlayer
	end

	local function fireAllProximityPromptsOnPlayer(target)
		if not target or not target.Character then return end
		for _, tool in ipairs(target.Character:GetChildren()) do
			if tool:IsA("Tool") then
				for _, descendant in ipairs(tool:GetDescendants()) do
					if descendant:IsA("ProximityPrompt") then
						fireproximityprompt(descendant)
					end
				end
			end
		end
	end

	local function onRenderStep()
		local target = findTargetPlayer()
		if target ~= targetPlayer then
			if target then
				createHighlight(target.Character)
			else
				clearHighlight()
			end
			targetPlayer = target
		end
	end

	tool.Equipped:Connect(function()
		if running then return end
		running = true
		RunService:BindToRenderStep("WeaponStealerHighlight", Enum.RenderPriority.Camera.Value + 1, onRenderStep)
	end)

	tool.Unequipped:Connect(function()
		running = false
		RunService:UnbindFromRenderStep("WeaponStealerHighlight")
		clearHighlight()
		targetPlayer = nil
	end)

	tool.Activated:Connect(function()
		if targetPlayer then
			fireAllProximityPromptsOnPlayer(targetPlayer)
		end
	end)
end

function enableInstantProximityPrompts()
    -- Disconnect first to avoid stacking
    disableInstantProximityPrompts()

    -- Override prompt durations when shown
    PromptShownConnection = ProximityPromptService.PromptShown:Connect(function(prompt)
        pcall(function()
            if not originalDurations[prompt] then
                originalDurations[prompt] = prompt.HoldDuration
            end
            prompt.HoldDuration = 0
        end)
    end)

    -- Override all existing prompts
    for _, v in ipairs(workspace:GetDescendants()) do
        if v:IsA("ProximityPrompt") then
            pcall(function()
                if not originalDurations[v] then
                    originalDurations[v] = v.HoldDuration
                end
                v.HoldDuration = 0
            end)
        end
    end

    -- Fire immediately on hold
    PromptButtonHoldBeganConnection = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
        pcall(function()
            prompt.HoldDuration = 0
            fireproximityprompt(prompt)
        end)
    end)
end

function disableInstantProximityPrompts()
    if PromptButtonHoldBeganConnection then
        PromptButtonHoldBeganConnection:Disconnect()
        PromptButtonHoldBeganConnection = nil
    end

    if PromptShownConnection then
        PromptShownConnection:Disconnect()
        PromptShownConnection = nil
    end

    -- Restore durations
    for prompt, original in pairs(originalDurations) do
        if prompt and prompt:IsDescendantOf(workspace) then
            pcall(function()
                prompt.HoldDuration = original
            end)
        end
    end

    -- Clear stored values
    originalDurations = {}
end

function startfb()
  	if brightLoop then
		brightLoop:Disconnect()
	end
	local function brightFunc()
		Lighting.Brightness = 2
		Lighting.ClockTime = 14
		Lighting.FogEnd = 100000
		Lighting.GlobalShadows = false
		Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
	end

	brightLoop = RunService.RenderStepped:Connect(brightFunc)
end

function endfb()
  if brightLoop then
		brightLoop:Disconnect()
	end
end

function noclip()
  Clip = false
	wait(0.1)
	local function NoclipLoop()
		if Clip == false and player.Character ~= nil then
			for _, child in pairs(player.Character:GetDescendants()) do
				if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= floatName then
					child.CanCollide = false
				end
			end
		end
	end
	Noclipping = RunService.Stepped:Connect(NoclipLoop)
	if args[1] and args[1] == 'nonotify' then return end
	notify('Noclip','Noclip Enabled')
end

function clip()
  if Noclipping then
		Noclipping:Disconnect()
	end
	Clip = true
	print("Noclip disabled")
end

local function applyHitbox(playerName)
	if playerName == Players.LocalPlayer.Name then return end -- exclude yourself

	local char = characterFolder:FindFirstChild(playerName)
	if not char then return end

	local hrp = char:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	if not originalSizes[playerName] then
		originalSizes[playerName] = hrp.Size
	end

	hrp.Size = Vector3.new(hbsize, hbsize, hbsize)
	hrp.Transparency = hbtrans
	hrp.CanCollide = false
end

local function revertHitbox(playerName)
	local char = characterFolder:FindFirstChild(playerName)
	if not char then return end

	local hrp = char:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	local original = originalSizes[playerName]
	if original then
		hrp.Size = original
	else
		hrp.Size = Vector3.new(2, 2, 1) -- fallback size if original wasn't saved
	end
	hrp.Transparency = 1
	hrp.CanCollide = true
end

function hitboxexpanderstart()
	if active then return end
	active = true

	-- Apply to existing players
	for _, char in pairs(characterFolder:GetChildren()) do
		if char:IsA("Model") and char:FindFirstChild("HumanoidRootPart") then
			applyHitbox(char.Name)
		end
	end

	-- Update loop
	hitboxConnection = RunService.Heartbeat:Connect(function()
		for _, player in pairs(Players:GetPlayers()) do
			local char = characterFolder:FindFirstChild(player.Name)
			if char and char:FindFirstChild("HumanoidRootPart") then
				applyHitbox(player.Name)
			end
		end
	end)
end

function hitboxexpanderend()
	if not active then return end
	active = false

	-- Revert all
	for name, _ in pairs(originalSizes) do
		revertHitbox(name)
	end

	-- Disconnect loop
	if hitboxConnection then
		hitboxConnection:Disconnect()
		hitboxConnection = nil
	end

	originalSizes = {}
end

-- Define the jumper functions
local function getHumanoid()
	local player = game:GetService("Players").LocalPlayer
	if player.Character then
		return player.Character:FindFirstChildOfClass("Humanoid")
	end
end

local function getRoot(char)
	return char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart")
end



function jumppowerstart()
	local humanoid = getHumanoid()
	if not humanoid then return end

	if not humanoid:FindFirstChild("OriginalJumpPower") then
		local originalJP = Instance.new("NumberValue")
		originalJP.Name = "OriginalJumpPower"
		originalJP.Value = humanoid.JumpPower
		originalJP.Parent = humanoid
	end

	humanoid.JumpPower = jp
end

function jumppowerend()
	local humanoid = getHumanoid()
	if not humanoid then return end

	local originalJP = humanoid:FindFirstChild("OriginalJumpPower")
	if originalJP then
		humanoid.JumpPower = originalJP.Value
		originalJP:Destroy()
	end
end

local Window = Rayfield:CreateWindow({
   Name = "waad hub",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "this script is free if anyone made u pay for it u got scammed ",
   LoadingSubtitle = "by wadadaddddadad on discord",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = waad, -- Create a custom folder for your hub/game
      FileName = "WaadSurvival"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "https://discord.gg/EVk2KPT3", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key",
      Subtitle = "yes u need a key",
      Note = "join discord for key pls https://discord.gg/r7fv3zEX", -- Use this to tell the user how to get a key
      FileName = "WaadsKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://raw.githubusercontent.com/shadywadd/tester/refs/heads/main/key"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab1 = Window:CreateTab("Client Mods", 4483362458) -- Title, Image

local Section = Tab1:CreateSection("Player stuff")

local Toggle = Tab1:CreateToggle({
   Name = "WalkSpeed Toggle",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       if Value then
           forceWalkSpeed()
       else
           stopForceWalkSpeed()
       end
   end,
})

local Slider = Tab1:CreateSlider({
	Name = "WalkSpeed",
	Range = {0, 200},
	Increment = 5,
	Suffix = " Speed",
	CurrentValue = loserspeed,
	Flag = "Slider_JP",
	Callback = function(Value)
		loserspeed = Value
	end,
})

local Toggle = Tab1:CreateToggle({
	Name = "Jump Power Toggle",
	CurrentValue = false,
	Flag = "Toggle_JumpPower",
	Callback = function(Value)
		toggleActive = Value
		if toggleActive then
			jumppowerstart()
		else
			jumppowerend()
		end
	end,
})

local Slider = Tab1:CreateSlider({
	Name = "Jump Power",
	Range = {0, 200},
	Increment = 5,
	Suffix = " JP",
	CurrentValue = jp,
	Flag = "Slider_JP",
	Callback = function(Value)
		jp = Value
		if toggleActive then
			jumppowerstart() -- Reapply with updated jp
		end
	end,
})

local Toggle = Tab1:CreateToggle({
	Name = "Noclip Toggle",
	CurrentValue = false,
	Flag = "NoclipToggle",
	Callback = function(Value)
		local success, err = pcall(function()
			if Value then
				noclip()
			else
				clip()
			end
		end)
	end,
})

local Divider = Tab1:CreateDivider()
local Section = Tab1:CreateSection("gay bypasses")
Tab1:CreateToggle({
	Name = "No Jump Cooldown",
	CurrentValue = false,
	Flag = "NoJumpCooldownReal",
	Callback = function(Value)
		if Value then
			startNoJumpCooldown()
		else
			stopNoJumpCooldown()
		end
	end,
})

local Divider = Tab1:CreateDivider()
local Section = Tab1:CreateSection("Auto thirst")
Tab1:CreateToggle({
    Name = "Auto Thirst",
    CurrentValue = false,
    Flag = "AutoThirst",
    Callback = function(Value)
        if Value then
            startAutoThirst()
        else
            stopAutoThirst()
        end
    end,
})

local Divider = Tab1:CreateDivider()
local Section = Tab1:CreateSection("Dumb stuff")

--// State Variables
local isDancing = false
local isSpinning = false
local spinSpeed = 5
local danceTrack = nil

--// Helper: Check R15
local function isR15()
	return humanoid.RigType == Enum.HumanoidRigType.R15
end

--// Helper: Get Random Dance ID
local function getDanceId()
	local dances = {
		"27789359", "30196114", "248263260", "45834924", "33796059", "28488254", "52155728"
	}
	if isR15() then
		dances = {
			"3333432454", "4555808220", "4049037604", "4555782893",
			"10214311282", "10714010337", "10713981723",
			"10714372526", "10714076981", "10714392151", "11444443576"
		}
	end
	return "rbxassetid://" .. dances[math.random(1, #dances)]
end

--// Dance Toggle
Tab1:CreateToggle({
	Name = "Toggle Dance",
	CurrentValue = false,
	Flag = "DanceToggle",
	Callback = function(Value)
		isDancing = Value

		if isDancing then
			local anim = Instance.new("Animation")
			anim.AnimationId = getDanceId()
			danceTrack = humanoid:LoadAnimation(anim)
			danceTrack.Looped = true
			danceTrack:Play()
		else
			if danceTrack then
				danceTrack:Stop()
				danceTrack:Destroy()
				danceTrack = nil
			end
		end
	end,
})

--// Spin Speed Slider
Tab1:CreateSlider({
	Name = "Spin Speed",
	Range = {0, 50},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = spinSpeed,
	Flag = "SpinSlider",
	Callback = function(Value)
		spinSpeed = Value
	end,
})

--// Spin Toggle
Tab1:CreateToggle({
	Name = "Toggle Spin",
	CurrentValue = false,
	Flag = "SpinToggle",
	Callback = function(Value)
		isSpinning = Value

		local root = getRoot(character)
		if not root then return end

		-- Remove existing spinner if any
		local existing = root:FindFirstChild("Spinning")
		if existing then
			existing:Destroy()
		end

		if isSpinning and spinSpeed > 0 then
			local spin = Instance.new("BodyAngularVelocity")
			spin.Name = "Spinning"
			spin.MaxTorque = Vector3.new(0, math.huge, 0)
			spin.AngularVelocity = Vector3.new(0, spinSpeed, 0)
			spin.Parent = root
		end
	end,
})

--// Update spin in real-time when speed is changed
RunService.RenderStepped:Connect(function()
	if isSpinning then
		local root = getRoot(character)
		local spinning = root:FindFirstChild("Spinning")
		if spinning then
			spinning.AngularVelocity = Vector3.new(0, spinSpeed, 0)
		end
	end
end)

local Tab2 = Window:CreateTab("PVP", 4483362458) -- Title, Image

local Section = Tab2:CreateSection("Reach (doesnt fully work but better than normal pvp)")
local Toggle = Tab2:CreateToggle({
   Name = "Hitbox Expander",
   CurrentValue = false,
   Flag = "hitboxtoggle",
   Callback = function(Value)
       if Value then
           hitboxexpanderstart()
       else
           hitboxexpanderend()
       end
   end,
})

local Slider = Tab2:CreateSlider({
	Name = "Hitbox Size",
	Range = {0, 200},
	Increment = 5,
	Suffix = "",
	CurrentValue = spinSpeed,
	Flag = "Slider_JP",
	Callback = function(Value)
		hbsize = Value
		if active then
			hitboxexpanderend()
			hitboxexpanderstart()
		end
	end,
})


local Divider = Tab2:CreateDivider()

local Button = Tab2:CreateButton({
   Name = "Weapon Stealer",
   Callback = function()
     giveWeaponStealerTool(game.Players.LocalPlayer)
   end,
})

local Tab3 = Window:CreateTab("Crafting", 4483362458) -- Title, Image

for _, itemName in ipairs(itemList) do
	Tab3:CreateButton({
		Name = "Craft " .. itemName,
		Callback = function()
			local args = {
				game:GetService("ReplicatedStorage"):WaitForChild("Craftables"):WaitForChild(itemName)
			}
			game:GetService("ReplicatedStorage"):WaitForChild("CraftItem"):FireServer(unpack(args))
		end
	})
end

local Tab4 = Window:CreateTab("Jobs", 4483362458) -- Title, Image
for _, jobName in ipairs(jobList) do
	Tab4:CreateButton({
		Name = "Switch to " .. jobName,
		Callback = function()
			local args = {
				game:GetService("ReplicatedStorage"):WaitForChild("Jobs"):WaitForChild(jobName)
			}
			game:GetService("ReplicatedStorage"):WaitForChild("ChangeJob"):FireServer(unpack(args))
		end
	})
end

local Tab5 = Window:CreateTab("Misc", 4483362458) -- Title, Image

local Toggle = Tab5:CreateToggle({
   Name = "IntantPP Toggle",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       if Value then
           enableInstantProximityPrompts()
       else
           disableInstantProximityPrompts()
       end
   end,
})

local Toggle = Tab5:CreateToggle({
   Name = "FullBright Toggle",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       if Value then
           startfb()
       else
           endfb()
       end
   end,
})

local Divider = Tab5:CreateDivider()
local Paragraph = Tab5:CreateParagraph({Title = "W.I.P", Content = "CowKing is buggy, but really fun to use. Current keybinds are H to jump, Q to stop/unstop cows (must be in walkspeed editor mode), R to switch between walkspeed editor and jumppower editor, + and - to increase/decrease walkspeed/jumppower, M to switch between 24 and 100 walkspeed, or 50 and 130 jumppower, and L to re-get all the cows (basically might fix some issues)"})
local Paragraph = Tab5:CreateParagraph({Title = "Formation", Content = "Cowking by default moves cows to your cursor, but you can switch between mouse mode and formation mode. By pressing Z, it switches from mouse mode to formation mode (or vice versa), during formation mode - cows line up behind you. Note I will add more formations later and make this entire system customizable. FOR ALL COWS, FORMATION MODE OR MOUSE MODE, YOU WILL NEED TO BE SOMEWHAT CLOSE TO THE COWS TO BEGIN CONTROLLING THEM"})
local Button = Tab5:CreateButton({
   Name = "CowKing",
   Callback = function()
    createCowControllerTool()
   end,
})

local Toggle = Tab5:CreateToggle({
   Name = "Delete barriers",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       if Value then
           startCleanupLoop()
       else
           stopCleanupLoop()
       end
   end,
})

local Tab6 = Window:CreateTab("gay", 4483362458) -- Title, Image

-- State variables
local grabtoolsEnabled = false
local grabtoolsConnection = nil
local targetToolNames = {} -- list of tool names to pickup, empty = all

-- Notification helper
local function notify(title, message)
    print(title .. ": " .. message)  -- replace with your UI notification if you want
end

-- Check if tool should be picked up
local function shouldPickupTool(toolName)
    if #targetToolNames == 0 then
        return true -- pick all tools if no filter set
    end

    for _, targetName in ipairs(targetToolNames) do
        if string.lower(toolName) == string.lower(targetName) then
            return true
        end
    end
    return false
end

-- Equip matching tools in workspace
local function equipTools()
    if not player.Character then return end
    local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
    if not humanoid then return end

    for _, child in ipairs(workspace:GetChildren()) do
        if child:IsA("Tool") and child:FindFirstChild("Handle") then
            if shouldPickupTool(child.Name) then
                humanoid:EquipTool(child)
            end
        end
    end
end

-- Enable grabtools: equip and connect event to equip on new tool spawn
local function enableGrabtools()
    if grabtoolsEnabled then return end
    grabtoolsEnabled = true

    equipTools()

    if grabtoolsConnection then
        grabtoolsConnection:Disconnect()
    end

    grabtoolsConnection = workspace.ChildAdded:Connect(function(child)
        if player.Character and child:IsA("Tool") and child:FindFirstChild("Handle") then
            if shouldPickupTool(child.Name) then
                wait(0.1) -- small delay to let tool fully load
                local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
                if humanoid then
                    humanoid:EquipTool(child)
                end
            end
        end
    end)

    local targetText = #targetToolNames > 0 and table.concat(targetToolNames, ", ") or "all tools"
    notify("Grabtools", "Enabled - Picking up: " .. targetText)
end

-- Disable grabtools: disconnect event and update state
local function disableGrabtools()
    if not grabtoolsEnabled then return end
    grabtoolsEnabled = false

    if grabtoolsConnection then
        grabtoolsConnection:Disconnect()
        grabtoolsConnection = nil
    end

    notify("Grabtools", "Disabled")
end

-- Toggle grabtools state
local function toggleGrabtools()
    if grabtoolsEnabled then
        disableGrabtools()
    else
        enableGrabtools()
    end
end

-- Parse comma-separated tool names from string input
local function parseToolNames(inputText)
    local names = {}
    if inputText == "" then
        return names
    end

    for name in string.gmatch(inputText, "([^,]+)") do
        local trimmedName = string.match(name, "^%s*(.-)%s*$")
        if trimmedName ~= "" then
            table.insert(names, trimmedName)
        end
    end

    return names
end

-- Scan workspace for tools with Handle and return list of unique names
local function scanWorkspaceTools()
    local seen = {}
    local tools = {}

    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Tool") and obj:FindFirstChild("Handle") then
            if not seen[obj.Name] then
                seen[obj.Name] = true
                table.insert(tools, obj.Name)
            end
        end
    end

    table.sort(tools)
    return tools
end

-- Dropdown for selecting tools dynamically found in workspace
local ToolDropdown = Tab6:CreateDropdown({
    Name = "Select Target Tools (dropdown)",
    Options = {"No tools found"},
    CurrentOption = nil,
    MultipleOptions = true,
    Flag = "ToolDropdownFlag",
    Callback = function(selected)
        targetToolNames = selected
        notify("Target Tools Updated (Dropdown)", #targetToolNames > 0 and table.concat(targetToolNames, ", ") or "all tools")
        -- Update TextBox to reflect dropdown selections (optional)
        ToolNameInput:Set(table.concat(targetToolNames, ", "))
    end,
})

-- Button to toggle grabtools on/off
local ToggleButton = Tab6:CreateButton({
    Name = "Toggle Grabtools",
    Callback = function()
        toggleGrabtools()
    end,
})

-- Button to refresh dropdown options from workspace
local RefreshButton = Tab6:CreateButton({
    Name = "Refresh Tool List",
    Callback = function()
        local tools = scanWorkspaceTools()
        if #tools == 0 then tools = {"No tools found"} end
        ToolDropdown:Refresh(tools)
        notify("Tool List Refreshed", "Found " .. tostring(#tools) .. " tools.")
    end,
})

-- Initial refresh of dropdown options on script start
do
    local tools = scanWorkspaceTools()
    if #tools == 0 then tools = {"No tools found"} end
    ToolDropdown:Refresh(tools)
end
