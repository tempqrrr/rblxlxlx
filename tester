local autoboss = false
local bossVerticalOffset = 5  -- Vertical offset from the boss's position (change this value)
local bossHorizontalOffset = 3  -- Horizontal offset from the boss's position (change this value)
local checkspeed = 0.08

local autofarmTask
local autofarmRunning = false
local bossWaitTask = nil

local player = game.Players.LocalPlayer
local entities = workspace.Entities
local forceFieldPath
local humanoidRootPart  -- Store humanoidRootPart for easy access
local lastBossTPTime = 0
local lastVoidTPTime = 0
local lastBoss29Time = 0  -- Cooldown for bosstp29
local bossdistance = 0  -- Variable to store the distance between the boss and the player

-- Function to get the ForceField path for the player
local function getForceFieldPath()
    local playerName = player.Name
    return entities:FindFirstChild(playerName) and entities[playerName]:FindFirstChild("ForceField")
end

-- Function to get the boss's humanoid root part
local function getBoss()
    for _, entity in pairs(entities:GetChildren()) do
        if not game.Players:FindFirstChild(entity.Name) then
            -- This is the boss since it's not a player
            return entity:FindFirstChild("HumanoidRootPart")
        end
    end
    return nil
end

-- Function to bypass the teleportation anti-TP mechanism (dash)
local function tpbypass()
    local args = {
        [1] = {
            [1] = {
                ["Module"] = "Dash"
            },
            [2] = "\5"
        }
    }

    -- Fire the dash command to bypass the anti-TP
    game:GetService("ReplicatedStorage"):WaitForChild("Bridgenet2Main"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
end

-- Function to teleport the player to a target position with vertical and horizontal offsets
local function tp(targetPosition)
    -- Apply the vertical and horizontal offsets to the target position
    if humanoidRootPart then
        local offsetPosition = targetPosition + Vector3.new(bossHorizontalOffset, bossVerticalOffset, 0)
        humanoidRootPart.CFrame = CFrame.new(offsetPosition)
    else
        print("HumanoidRootPart is not available!")
    end
end

-- Function to update the paths after respawn
local function updatePathsAfterRespawn(character)
    wait(0.2)
    forceFieldPath = getForceFieldPath()
    humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")

    -- ðŸ†• Reset cooldown timers & distance
    lastBossTPTime = 0
    lastBoss29Time = 0
    lastVoidTPTime = 0
    bossdistance = 0
end

-- Listen for the player's respawn and update the paths after the delay
player.CharacterAdded:Connect(function(character)
    updatePathsAfterRespawn(character)
end)

-- Function to ensure humanoidRootPart is properly initialized before we start the main loop
local function initializeHumanoidRootPart()
    -- Wait until HumanoidRootPart is available (before the main logic starts)
    humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
    forceFieldPath = getForceFieldPath()  -- Initialize the ForceField path too
end

-- Initial setup when the script is first loaded (before respawn)
if player.Character then
    initializeHumanoidRootPart()
end

-- Function to calculate the distance between the player and the boss
local function bossget()
    local bossHumanoidRootPart = getBoss()
    if bossHumanoidRootPart then
        bossdistance = (humanoidRootPart.Position - bossHumanoidRootPart.Position).Magnitude
    end
end

-- bosstp31: Used when the boss is more than 30 studs away
local function bosstp31()
    -- Bypass and teleport to boss if distance > 30, with vertical and horizontal offset
    tpbypass()
    wait(0.005)
    tp(getBoss().Position)  -- Teleport to the boss's position with offsets
end

-- bosstp29: Used when the boss is less than 30 studs away
local function bosstp29()
    -- Teleport to boss directly if distance <= 30, with vertical and horizontal offset
    tp(getBoss().Position)  -- Teleport to the boss's position with offsets
end

-- Function to toggle the autoboss feature on and off
local function toggleAutoboss()
    autoboss = not autoboss
    print("Autoboss is now: " .. tostring(autoboss))  -- Print the status to the console
end

local function ffhandler()
    -- ForceField path check
    forceFieldPath = getForceFieldPath()

    if forceFieldPath then
        -- Get boss distance to decide which tp function to use
        bossget()

        -- If the boss distance > 30, we will use bosstp31
        if tick() - lastBossTPTime > 2 then  -- 2-second cooldown for bosstp31
            if bossdistance > 30 then
                bosstp31()  -- Call bosstp31
                lastBossTPTime = tick()  -- Set cooldown for bosstp31
            end
        -- If the boss distance <= 30, we will use bosstp29
        elseif tick() - lastBoss29Time > 0.5 then  -- 0.5-second cooldown for bosstp29
            if bossdistance <= 30 then
                bosstp29()  -- Call bosstp29
                lastBoss29Time = tick()  -- Set cooldown for bosstp29
            end
        end
    else
        -- Forcefield doesn't exist, use voidtp logic
        if tick() - lastVoidTPTime > 2 then
            -- No forcefield, use voidtp
            tpbypass()
            wait(0.005)
            tp(Vector3.new(humanoidRootPart.Position.X, -999, humanoidRootPart.Position.Z))
            lastVoidTPTime = tick()  -- Set cooldown for voidtp
        end
    end
end


-- Function to start the autofarm loop
local function startAutofarmLoop()
    if autofarmRunning then return end
    autofarmRunning = true

    autofarmTask = task.spawn(function()
        while autofarmRunning do
            task.wait(checkspeed) -- ðŸ†• uses the dynamic variable
            ffhandler()
        end
    end)
end

-- Function to stop the autofarm loop
local function stopAutofarmLoop()
    autofarmRunning = false
    autofarmTask = nil
end

local function setAutoboss(state)
    if autoboss ~= state then
        autoboss = state
        print("Autoboss changed to:", autoboss)

        if autoboss then
            -- Stop any previous wait task
            if bossWaitTask then
                bossWaitTask:Disconnect()
                bossWaitTask = nil
            end

            -- Start task that waits for boss to spawn
            bossWaitTask = task.spawn(function()
                while autoboss do
                    local bossPart = getBoss()
                    if bossPart then
                        print("Boss found. Starting autofarm.")
                        startAutofarmLoop()
                        bossWaitTask = nil
                        break
                    end
                    task.wait(0.5)
                end
            end)
        else
            stopAutofarmLoop()

            -- Cancel boss wait task if active
            if bossWaitTask then
                bossWaitTask = nil
            end
        end
    end
end


-- GUI SETUP (now it's safe to use setAutoboss)
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Fatman fanclub",
   LoadingTitle = "Exps for a shitty ass game",
   LoadingSubtitle = "by wad",
   Theme = "Amethyst",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "waadghoulre",
      FileName = "wadadadad"
   }
})

local BossTab = Window:CreateTab("Boss Autofarm", nil)
BossTab:CreateSection("Boss Toggle")

BossTab:CreateToggle({
   Name = "Boss Autofarm",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       setAutoboss(Value) -- NOW this works
   end,
})
