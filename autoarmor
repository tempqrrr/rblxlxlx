local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local localPlayer = Players.LocalPlayer
local name = localPlayer.Name
local connection = nil
local isChecking = false
local isTeleporting = false

-- Reuse desync variables
local desyncEnabled = false
local VOID_POSITION = Vector3.new(-435, -22, 23)

local realCFrame
local realVelocity

-- Heartbeat-based desync logic
RunService.Heartbeat:Connect(function()
    if desyncEnabled and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = localPlayer.Character.HumanoidRootPart

        realCFrame = hrp.CFrame
        realVelocity = hrp.AssemblyLinearVelocity

        hrp.CFrame = CFrame.new(VOID_POSITION)
        hrp.AssemblyLinearVelocity = Vector3.new(0, 0, 0)

        RunService.RenderStepped:Wait()

        hrp.CFrame = realCFrame
        hrp.AssemblyLinearVelocity = realVelocity
    end
end)

-- Hook to spoof readings
local oldIndex
oldIndex = hookmetamethod(game, "__index", function(self, key)
    if desyncEnabled and not checkcaller() then
        if key == "CFrame" and self == localPlayer.Character.HumanoidRootPart then
            return realCFrame or self.CFrame
        elseif key == "AssemblyLinearVelocity" and self == localPlayer.Character.HumanoidRootPart then
            return realVelocity or self.AssemblyLinearVelocity
        end
    end
    return oldIndex(self, key)
end)

-- Actual auto-armor TP logic
function ArmorTP()
    if isTeleporting then return end

    local playerFolder = workspace.Players:FindFirstChild(name)
    if not playerFolder then warn("Player folder not found.") return end

    local hrp = playerFolder:FindFirstChild("HumanoidRootPart")
    local armorValueObj = playerFolder:FindFirstChild("BodyEffects") and playerFolder.BodyEffects:FindFirstChild("Armor")

    if not hrp or not armorValueObj then
        warn("Missing HRP or Armor")
        return
    end

    local clickDetectorPart = workspace.Ignored.Shop:GetChildren()[28]
    local clickDetector = clickDetectorPart and clickDetectorPart:FindFirstChildOfClass("ClickDetector")
    if not clickDetector then warn("No click detector") return end

    isTeleporting = true

    -- Begin desync
    desyncEnabled = true

    local startTime = tick()
    repeat
        fireclickdetector(clickDetector)
        RunService.Heartbeat:Wait()
    until armorValueObj.Value >= 200 or (tick() - startTime) > 2

    -- End desync
    desyncEnabled = false

    isTeleporting = false
end

function Checker()
    if isTeleporting then return end

    local playerFolder = workspace.Players:FindFirstChild(name)
    if playerFolder and playerFolder:FindFirstChild("BodyEffects") then
        local armor = playerFolder.BodyEffects:FindFirstChild("Armor")
        if armor and armor.Value < 200 then
            ArmorTP()
        end
    end
end

-- Keybind toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.K then
        if isChecking then
            if connection then connection:Disconnect() end
            isChecking = false
            print("Checker deactivated")
        else
            connection = RunService.RenderStepped:Connect(Checker)
            isChecking = true
            print("Checker activated")
        end
    end
end)
